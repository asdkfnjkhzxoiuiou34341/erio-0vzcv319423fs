#!/usr/bin/env python3

import re
import sys
import os
import base64
import binascii

def read_file(filename):
    """–ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞"""
    try:
        with open(filename, 'r', encoding='utf-8', errors='ignore') as f:
            return f.read()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return None

def write_file(filename, content):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ —Ñ–∞–π–ª"""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(content)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ {filename}: {e}")
        return False

def extract_moonsec_payload(content):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ø–æ–ª–µ–∑–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –∏–∑ MoonSec V3"""
    print("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É MoonSec V3...")
    
    # –ò—â–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (l,...)
    main_function_pattern = r'return\s*\(\s*function\s*\(\s*([^)]*)\s*\)(.*?)end\s*\)\s*\('
    match = re.search(main_function_pattern, content, re.DOTALL)
    
    if match:
        params = match.group(1).strip()
        function_body = match.group(2)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –≥–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
        return function_body
    
    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
    alt_pattern = r'function\s*\(\s*([^)]*)\s*\)(.*?)(?=return\s*zg|$)'
    match = re.search(alt_pattern, content, re.DOTALL)
    
    if match:
        params = match.group(1).strip()
        function_body = match.group(2)
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
        return function_body
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é")
    return content

def decode_string_constants(content):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã MoonSec"""
    print("üî§ –î–µ–∫–æ–¥–∏—Ä—É—é —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã...")
    
    # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É —Å—Ç—Ä–æ–∫
    string_table_patterns = [
        r't\s*=\s*"([^"]+)"',
        r'local\s+t\s*=\s*"([^"]+)"',
        r'_\[g\[n\]\]\s*=\s*"([^"]+)"'
    ]
    
    decoded_strings = []
    
    for pattern in string_table_patterns:
        matches = re.findall(pattern, content)
        for match in matches:
            decoded = decode_escaped_string(match)
            if decoded and len(decoded) > 1:
                decoded_strings.append(decoded)
    
    if decoded_strings:
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(decoded_strings)} —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç")
        return decoded_strings
    
    print("‚ö†Ô∏è  –°—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    return []

def decode_escaped_string(s):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É"""
    result = ""
    i = 0
    
    while i < len(s):
        if s[i] == '\\' and i + 1 < len(s):
            next_char = s[i + 1]
            if next_char.isdigit():
                # –í–æ—Å—å–º–µ—Ä–∏—á–Ω—ã–π –∫–æ–¥
                octal = ""
                j = i + 1
                while j < len(s) and j < i + 4 and s[j].isdigit():
                    octal += s[j]
                    j += 1
                if octal:
                    try:
                        result += chr(int(octal, 8))
                        i = j
                        continue
                    except:
                        pass
            elif next_char == 'n':
                result += '\n'
                i += 2
                continue
            elif next_char == 't':
                result += '\t'
                i += 2
                continue
            elif next_char == 'r':
                result += '\r'
                i += 2
                continue
            elif next_char == '\\':
                result += '\\'
                i += 2
                continue
            elif next_char == '"':
                result += '"'
                i += 2
                continue
        
        result += s[i]
        i += 1
    
    return result

def extract_function_names(strings):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""
    print("üîß –ò–∑–≤–ª–µ–∫–∞—é –∏–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π...")
    
    function_names = set()
    
    for string in strings:
        # –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ –Ω—É–ª–µ–≤—ã–º –±–∞–π—Ç–∞–º
        parts = string.split('\0')
        for part in parts:
            if part and len(part) > 1:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Å—Ç—å –∏–º–µ–Ω–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
                if part.isalpha() or ('.' in part and all(c.isalnum() or c in '._' for c in part)):
                    function_names.add(part)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Lua/Roblox
                if part in ['tonumber', 'tostring', 'string', 'table', 'math', 'game', 'workspace', 'script', 'wait']:
                    function_names.add(part)
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(function_names)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω —Ñ—É–Ω–∫—Ü–∏–π")
    return sorted(list(function_names))

def beautify_lua_code(content):
    """–£–ª—É—á—à–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å Lua –∫–æ–¥–∞"""
    print("‚ú® –£–ª—É—á—à–∞—é —á–∏—Ç–∞–µ–º–æ—Å—Ç—å –∫–æ–¥–∞...")
    
    # –ó–∞–º–µ–Ω—è–µ–º –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–º–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –Ω–∞ —á–∏—Ç–∞–µ–º—ã–µ
    var_replacements = {
        r'\bl\b': 'local_var',
        r'\bg\b': 'instruction',
        r'\bz\b': 'stack',
        r'\bd\b': 'constants',
        r'\bh\b': 'functions',
        r'\bo\b': 'environment',
        r'\bm\b': 'pc',  # program counter
        r'\bs\b': 'stack_size',
        r'\be\b': 'arg1',
        r'\bn\b': 'arg2',
        r'\bt\b': 'arg3'
    }
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ, —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–ª–æ–≤
    result = content
    for old, new in var_replacements.items():
        result = re.sub(old, new, result)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç—Å—Ç—É–ø—ã
    lines = result.split('\n')
    formatted_lines = []
    indent_level = 0
    
    for line in lines:
        stripped = line.strip()
        if not stripped:
            formatted_lines.append('')
            continue
            
        # –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø –ø–µ—Ä–µ–¥ end, else, elseif
        if any(stripped.startswith(keyword) for keyword in ['end', 'else', 'elseif', 'until']):
            indent_level = max(0, indent_level - 1)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø
        formatted_lines.append('  ' * indent_level + stripped)
        
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if any(keyword in stripped for keyword in ['then', ' do', 'function', 'if ', 'while ', 'for ', 'repeat']):
            if not any(stripped.endswith(keyword) for keyword in ['end', 'then m=m+1']):
                indent_level += 1
    
    return '\n'.join(formatted_lines)

def reconstruct_roblox_script(content, function_names):
    """–†–µ–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã–π Roblox —Å–∫—Ä–∏–ø—Ç"""
    print("üî® –†–µ–∫–æ–Ω—Å—Ç—Ä—É–∏—Ä—É—é —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã–π Roblox —Å–∫—Ä–∏–ø—Ç...")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É
    payload = extract_moonsec_payload(content)
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∫—Ä–∏–ø—Ç–∞
    script_header = """-- –î–µ–æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Roblox —Å–∫—Ä–∏–ø—Ç
-- –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω MoonSec V3
-- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω

"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Roblox
    roblox_vars = """-- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ Roblox
local game = game
local workspace = workspace
local script = script
local wait = wait
local spawn = spawn
local delay = delay

"""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    if function_names:
        script_header += "-- –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
        for func in function_names[:20]:  # –ü–µ—Ä–≤—ã–µ 20
            if '.' not in func:
                script_header += f"local {func} = {func}\n"
        script_header += "\n"
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–¥
    main_code = payload
    
    # –ó–∞–º–µ–Ω—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    replacements = [
        (r'local\s+([a-z])\s*=\s*0xff', r'local byte_max = 255'),
        (r'local\s+([a-z])\s*=\s*\{\}', r'local data_table = {}'),
        (r'local\s+([a-z])\s*=\s*\(1\)', r'local counter = 1'),
        (r'while\s+true\s+do', 'while true do'),
        (r'if\s+not\s+([a-zA-Z_][a-zA-Z0-9_]*)\s+then\s+break\s+end', r'if not \1 then break end'),
    ]
    
    for old_pattern, new_pattern in replacements:
        main_code = re.sub(old_pattern, new_pattern, main_code)
    
    # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç
    final_script = script_header + roblox_vars + main_code
    
    # –£–ª—É—á—à–∞–µ–º —á–∏—Ç–∞–µ–º–æ—Å—Ç—å
    final_script = beautify_lua_code(final_script)
    
    return final_script

def create_executable_version(content):
    """–°–æ–∑–¥–∞–µ—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—É—é –≤–µ—Ä—Å–∏—é –±–µ–∑ –ø–æ—Ç–µ—Ä–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    print("‚öôÔ∏è  –°–æ–∑–¥–∞—é –∏—Å–ø–æ–ª–Ω—è–µ–º—É—é –≤–µ—Ä—Å–∏—é...")
    
    # –ù–∞—Ö–æ–¥–∏–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —á–∞—Å—Ç–∏
    critical_patterns = [
        r'return\s*\(\s*function.*?end\s*\)\s*\([^)]*\)',  # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞
        r'local\s+[a-z]\s*=\s*0x[0-9a-fA-F]+',  # Hex –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        r'local\s+[a-z]\s*=\s*\{.*?\}',  # –¢–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö
        r'function\s*\([^)]*\).*?end',  # –§—É–Ω–∫—Ü–∏–∏
    ]
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —á–∞—Å—Ç–∏
    critical_parts = []
    for pattern in critical_patterns:
        matches = re.findall(pattern, content, re.DOTALL)
        critical_parts.extend(matches)
    
    # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
    executable_version = content
    
    # –¢–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏
    simple_replacements = [
        (r'--\[\[.*?\]\]', ''),  # –£–¥–∞–ª—è–µ–º –±–ª–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        (r'--[^\n]*', ''),  # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        (r'\n\s*\n', '\n'),  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    ]
    
    for old, new in simple_replacements:
        executable_version = re.sub(old, new, executable_version, flags=re.DOTALL)
    
    return executable_version.strip()

def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python3 roblox_moonsec_deobfuscator.py <—Ñ–∞–π–ª>")
        return
    
    filename = sys.argv[1]
    
    print("üöÄ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ç–æ—Ä MoonSec V3 –¥–ª—è Roblox")
    print("=" * 60)
    print(f"üìÅ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ñ–∞–π–ª: {filename}")
    
    # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
    content = read_file(filename)
    if not content:
        return
    
    print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {len(content):,} –±–∞–π—Ç")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
    string_constants = decode_string_constants(content)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏–π
    function_names = extract_function_names(string_constants)
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–µ–æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–∞
    base_name = os.path.splitext(filename)[0]
    
    print("\nüîß –°–æ–∑–¥–∞—é –¥–µ–æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏...")
    
    # 1. –ò—Å–ø–æ–ª–Ω—è–µ–º–∞—è –≤–µ—Ä—Å–∏—è (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
    executable_version = create_executable_version(content)
    executable_file = f"{base_name}_executable.lua"
    write_file(executable_file, executable_version)
    print(f"‚úÖ –ò—Å–ø–æ–ª–Ω—è–µ–º–∞—è –≤–µ—Ä—Å–∏—è: {executable_file}")
    
    # 2. –ß–∏—Ç–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è (—É–ª—É—á—à–µ–Ω–Ω–∞—è —á–∏—Ç–∞–µ–º–æ—Å—Ç—å)
    readable_version = reconstruct_roblox_script(content, function_names)
    readable_file = f"{base_name}_readable.lua"
    write_file(readable_file, readable_version)
    print(f"‚úÖ –ß–∏—Ç–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è: {readable_file}")
    
    # 3. –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–π
    functions_file = f"{base_name}_functions_analysis.txt"
    functions_content = f"–ê–ù–ê–õ–ò–ó –§–£–ù–ö–¶–ò–ô ROBLOX –°–ö–†–ò–ü–¢–ê\n{'='*50}\n\n"
    functions_content += f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(function_names)}\n\n"
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ —Ç–∏–ø–∞–º
    roblox_functions = [f for f in function_names if f in ['game', 'workspace', 'script', 'wait', 'spawn', 'delay']]
    lua_functions = [f for f in function_names if f in ['tonumber', 'tostring', 'string', 'table', 'math', 'pairs', 'ipairs']]
    custom_functions = [f for f in function_names if f not in roblox_functions + lua_functions]
    
    if roblox_functions:
        functions_content += f"–§–£–ù–ö–¶–ò–ò ROBLOX ({len(roblox_functions)}):\n"
        for func in roblox_functions:
            functions_content += f"  ‚Ä¢ {func}\n"
        functions_content += "\n"
    
    if lua_functions:
        functions_content += f"–°–¢–ê–ù–î–ê–†–¢–ù–´–ï –§–£–ù–ö–¶–ò–ò LUA ({len(lua_functions)}):\n"
        for func in lua_functions:
            functions_content += f"  ‚Ä¢ {func}\n"
        functions_content += "\n"
    
    if custom_functions:
        functions_content += f"–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ({len(custom_functions)}):\n"
        for func in custom_functions[:50]:  # –ü–µ—Ä–≤—ã–µ 50
            functions_content += f"  ‚Ä¢ {func}\n"
        if len(custom_functions) > 50:
            functions_content += f"  ... –∏ –µ—â–µ {len(custom_functions) - 50} —Ñ—É–Ω–∫—Ü–∏–π\n"
    
    write_file(functions_file, functions_content)
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–π: {functions_file}")
    
    # 4. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
    report_file = f"{base_name}_deobfuscation_report.txt"
    report_content = f"""–û–¢–ß–ï–¢ –û –î–ï–û–ë–§–£–°–ö–ê–¶–ò–ò ROBLOX –°–ö–†–ò–ü–¢–ê
{'='*60}

–ò–°–•–û–î–ù–´–ô –§–ê–ô–õ: {filename}
–†–ê–ó–ú–ï–†: {len(content):,} –±–∞–π—Ç
–¢–ò–ü –û–ë–§–£–°–ö–ê–¶–ò–ò: MoonSec V3

–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç: {len(string_constants)}
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –∏–º–µ–Ω —Ñ—É–Ω–∫—Ü–∏–π: {len(function_names)}
‚Ä¢ –§—É–Ω–∫—Ü–∏–∏ Roblox: {len(roblox_functions)}
‚Ä¢ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Lua: {len(lua_functions)}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏: {len(custom_functions)}

–°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:
1. {executable_file} - –ò—Å–ø–æ–ª–Ω—è–µ–º–∞—è –≤–µ—Ä—Å–∏—è (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å)
2. {readable_file} - –ß–∏—Ç–∞–µ–º–∞—è –≤–µ—Ä—Å–∏—è (—É–ª—É—á—à–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞)
3. {functions_file} - –ê–Ω–∞–ª–∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
4. {report_file} - –≠—Ç–æ—Ç –æ—Ç—á–µ—Ç

–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {executable_file} –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ Roblox
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ {readable_file} –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ {functions_file} –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

–í–ê–ñ–ù–û: –ò—Å–ø–æ–ª–Ω—è–µ–º–∞—è –≤–µ—Ä—Å–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å!
"""
    
    write_file(report_file, report_content)
    print(f"‚úÖ –û—Ç—á–µ—Ç: {report_file}")
    
    print(f"\nüéâ –î–ï–û–ë–§–£–°–ö–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!")
    print(f"üìÅ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: 4")
    print(f"üîß –î–ª—è Roblox –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: {executable_file}")
    print(f"üìñ –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: {readable_file}")

if __name__ == "__main__":
    main()