-- ===== MODULAR SCRIPT LOADER =====
-- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥—Ä—É–∑—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥—É–ª–∏ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
-- –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É "Out of local registers" –ø—É—Ç–µ–º —Ä–∞–∑–±–∏–µ–Ω–∏—è –∫–æ–¥–∞ –Ω–∞ –º–æ–¥—É–ª–∏

if not game:IsLoaded() then game.Loaded:Wait() end

-- –°–∏—Å—Ç–µ–º–∞ –º–æ–¥—É–ª–µ–π
local ModuleLoader = {}
local LoadedModules = {}
local ModuleCache = {}

-- –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è GitHub raw —Ñ–∞–π–ª–æ–≤ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π)
local GITHUB_BASE_URL = "https://raw.githubusercontent.com/yourusername/yourrepo/main/modules/"

-- –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è
function ModuleLoader.loadModule(moduleName, forceReload)
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if not forceReload and LoadedModules[moduleName] then
        print("MODULE: –ú–æ–¥—É–ª—å", moduleName, "—É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞")
        return LoadedModules[moduleName]
    end
    
    print("MODULE: –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª—å", moduleName, "...")
    
    local url = GITHUB_BASE_URL .. moduleName .. ".lua"
    local success, response = pcall(function()
        return game:HttpGet(url)
    end)
    
    if not success then
        warn("MODULE: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å", moduleName, ":", response)
        return nil
    end
    
    -- –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –º–æ–¥—É–ª—å
    local moduleFunc, compileError = loadstring(response)
    if not moduleFunc then
        warn("MODULE: –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ –º–æ–¥—É–ª—è", moduleName, ":", compileError)
        return nil
    end
    
    -- –í—ã–ø–æ–ª–Ω—è–µ–º –º–æ–¥—É–ª—å
    local executeSuccess, moduleResult = pcall(moduleFunc)
    if not executeSuccess then
        warn("MODULE: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–æ–¥—É–ª—è", moduleName, ":", moduleResult)
        return nil
    end
    
    -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    LoadedModules[moduleName] = moduleResult or true
    print("MODULE: ‚úÖ –ú–æ–¥—É–ª—å", moduleName, "—É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
    
    return LoadedModules[moduleName]
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª—è
function ModuleLoader.reloadModule(moduleName)
    LoadedModules[moduleName] = nil
    return ModuleLoader.loadModule(moduleName, true)
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª—è
function ModuleLoader.isLoaded(moduleName)
    return LoadedModules[moduleName] ~= nil
end

-- –û–±—â–∏–µ —Å–µ—Ä–≤–∏—Å—ã (–∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤—Å–µ–º–∏ –º–æ–¥—É–ª—è–º–∏)
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")

-- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è–º–∏
_G.ModuleLoader = ModuleLoader
_G.LoadedModules = LoadedModules

-- –ë–∞–∑–æ–≤—ã–µ –∫–æ–Ω—Ñ–∏–≥–∏ (–ª–µ–≥–∫–∏–µ, –Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç –ø—Ä–æ–±–ª–µ–º —Å registers)
_G.BaseConfig = {
    Version = "1.0.0",
    Author = "YourName",
    ScriptName = "Modular Script",
    
    -- URLs –º–æ–¥—É–ª–µ–π
    Modules = {
        GUI = "gui_module",
        Movement = "movement_module", 
        YBA = "yba_module",
        Autofarm = "autofarm_module",
        AntiTimeStop = "antitimestop_module",
        Teleport = "teleport_module",
        ESP = "esp_module"
    },
    
    -- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∏
    AutoLoad = {
        GUI = true,      -- GUI –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å
        Movement = false, -- –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é
        YBA = false,
        Autofarm = false,
        AntiTimeStop = false,
        Teleport = false,
        ESP = false
    }
}

-- –°–∏—Å—Ç–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏
_G.ModuleEvents = {}

function _G.ModuleEvents.fire(eventName, ...)
    local listeners = _G.ModuleEvents[eventName]
    if listeners then
        for _, callback in pairs(listeners) do
            pcall(callback, ...)
        end
    end
end

function _G.ModuleEvents.connect(eventName, callback)
    if not _G.ModuleEvents[eventName] then
        _G.ModuleEvents[eventName] = {}
    end
    table.insert(_G.ModuleEvents[eventName], callback)
end

-- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –º–æ–¥—É–ª–µ–π
_G.ModuleUtils = {
    Services = {
        Players = Players,
        RunService = RunService,
        UserInputService = UserInputService,
        TweenService = TweenService,
        CoreGui = CoreGui
    },
    
    -- –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    safeConnect = function(signal, callback)
        local success, connection = pcall(function()
            return signal:Connect(callback)
        end)
        return success and connection or nil
    end,
    
    -- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    cleanupConnections = function(connections)
        for _, connection in pairs(connections or {}) do
            if connection and typeof(connection) == "RBXScriptConnection" then
                pcall(function() connection:Disconnect() end)
            end
        end
    end
}

print("=== MODULAR SCRIPT LOADER ===")
print("–í–µ—Ä—Å–∏—è:", _G.BaseConfig.Version)
print("–ê–≤—Ç–æ—Ä:", _G.BaseConfig.Author)

-- –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
print("–ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫—É –º–æ–¥—É–ª–µ–π...")

-- –ó–∞–≥—Ä—É–∂–∞–µ–º GUI –º–æ–¥—É–ª—å (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
if _G.BaseConfig.AutoLoad.GUI then
    task.spawn(function()
        task.wait(0.1) -- –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        local gui = ModuleLoader.loadModule(_G.BaseConfig.Modules.GUI)
        if gui then
            print("‚úÖ GUI –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            _G.ModuleEvents.fire("GUILoaded", gui)
        else
            warn("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å GUI –º–æ–¥—É–ª—å")
        end
    end)
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–µ–Ω–∏–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π
function _G.loadModuleOnDemand(moduleName)
    local moduleKey = _G.BaseConfig.Modules[moduleName]
    if moduleKey then
        return ModuleLoader.loadModule(moduleKey)
    else
        warn("MODULE: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–æ–¥—É–ª—å:", moduleName)
        return nil
    end
end

-- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –º–æ–¥—É–ª–µ–π
_G.ModuleCommands = {
    load = function(moduleName)
        return _G.loadModuleOnDemand(moduleName)
    end,
    
    reload = function(moduleName)
        local moduleKey = _G.BaseConfig.Modules[moduleName]
        if moduleKey then
            return ModuleLoader.reloadModule(moduleKey)
        end
        return nil
    end,
    
    list = function()
        print("=== –ó–ê–ì–†–£–ñ–ï–ù–ù–´–ï –ú–û–î–£–õ–ò ===")
        for name, module in pairs(LoadedModules) do
            print("‚úÖ", name, typeof(module))
        end
        print("=== –î–û–°–¢–£–ü–ù–´–ï –ú–û–î–£–õ–ò ===") 
        for name, key in pairs(_G.BaseConfig.Modules) do
            local loaded = LoadedModules[key] and "‚úÖ" or "‚¨ú"
            print(loaded, name, "(" .. key .. ")")
        end
    end,
    
    status = function()
        print("=== –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ –ú–û–î–£–õ–ï–ô ===")
        print("–ó–∞–≥—Ä—É–∂–µ–Ω–æ –º–æ–¥—É–ª–µ–π:", #LoadedModules)
        print("–î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥—É–ª–µ–π:", #_G.BaseConfig.Modules)
        print("–ë–∞–∑–∞ URL:", GITHUB_BASE_URL)
    end
}

-- –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ _G –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
_G.ml = _G.ModuleCommands.load
_G.mr = _G.ModuleCommands.reload  
_G.mlist = _G.ModuleCommands.list
_G.mstatus = _G.ModuleCommands.status

print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –º–æ–¥—É–ª–µ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ _G.ml('ModuleName') –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥—É–ª–µ–π")
print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ _G.mlist() –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–¥—É–ª–µ–π")
print("üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏:", table.concat({"GUI", "Movement", "YBA", "Autofarm", "AntiTimeStop", "Teleport", "ESP"}, ", "))

return ModuleLoader